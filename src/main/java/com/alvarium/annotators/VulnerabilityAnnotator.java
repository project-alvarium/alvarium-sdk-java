/*******************************************************************************
 * Copyright 2023 Dell Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 *******************************************************************************/
package com.alvarium.annotators;

import com.alvarium.annotators.vulnerability.*;
import com.alvarium.contracts.Annotation;
import com.alvarium.contracts.AnnotationType;
import com.alvarium.contracts.LayerType;
import com.alvarium.hash.HashType;
import com.alvarium.sign.SignatureInfo;
import com.alvarium.utils.PropertyBag;
import org.apache.logging.log4j.Logger;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.time.ZonedDateTime;
import java.util.List;
import java.util.Map;



public class VulnerabilityAnnotator extends AbstractAnnotator implements Annotator {
    final VulnerabilityAnnotatorConfig cfg;
    final HashType hash;
    final SignatureInfo sign;
    final AnnotationType kind;
    final LayerType layer;

    private PackageFileHandler packageHandler;

    protected VulnerabilityAnnotator(
        VulnerabilityAnnotatorConfig cfg, 
        HashType hash, 
        SignatureInfo signature,
        Logger logger,
        LayerType layer
    ) {
        super(logger);
        this.cfg = cfg;
        this.hash = hash;
        this.sign = signature;
        this.kind = AnnotationType.VULNERABILITY;
        this.layer = layer;
    }

    @Override
    public Annotation execute(PropertyBag ctx, byte[] data, String key) throws AnnotatorException {
        String dir = ctx.getProperty(AnnotationType.VULNERABILITY.name(), String.class);
        
        List<String> vulnerabilities;
        boolean isSatisfied;
        String host = "";
        try{
            host = InetAddress.getLocalHost().getHostName();

            Map<String, String> packages = getPackages(dir);
            vulnerabilities = retrievePackagesVulnerabilities(packages);
            isSatisfied = vulnerabilities.isEmpty();
        } catch (UnknownHostException | AnnotatorException e) {
            isSatisfied = false;
            this.logger.error("Error during VulnerabilityAnnotator execution: ",e);
        }
        
        final Annotation annotation = new Annotation(
            key, 
            this.hash, 
            host, 
            layer,
            this.kind, 
            null, 
            isSatisfied, 
            ZonedDateTime.now()
        );

        final String annotationSignature = super.signAnnotation(
            this.sign.getPrivateKey(), 
            annotation
        );

        annotation.setSignature(annotationSignature);
        return annotation;
    }
    
    private Map<String, String> getPackages(String dir) throws AnnotatorException {
        try {
            this.packageHandler = new PackageFileHandlerFactory().getHandler(dir);
            return this.packageHandler.getPackages();
        } catch (VulnerabilityException e) {
            throw new AnnotatorException("Failed to get dependency info", e);
        } catch (Exception e) {
            throw new AnnotatorException("Failed to get dependency info", e);
        }
    }
    
    private List<String> retrievePackagesVulnerabilities( Map<String, String> packages) throws AnnotatorException {
        try{
            final VulnerabilityApiHandler apiHandler = new VulnerabilityApiHandlerFactory()
                .getHandler(this.cfg);
            List<String> vulnerabilities = apiHandler.getVulnerabilityIds(packages);
            return vulnerabilities;
        } catch (VulnerabilityException e) {
            throw new AnnotatorException("Failed to retrieve packages vulnerabilities", e);
        } catch (Exception e) {
            throw new AnnotatorException("Failed to retrieve packages vulnerabilities", e);
        }

    }

}

