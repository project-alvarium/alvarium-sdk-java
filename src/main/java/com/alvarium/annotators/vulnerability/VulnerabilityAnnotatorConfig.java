/*******************************************************************************
* Copyright 2024 Dell Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
*******************************************************************************/
package com.alvarium.annotators.vulnerability;

import com.alvarium.annotators.AnnotatorConfig;
import com.alvarium.contracts.AnnotationType;
import com.alvarium.utils.ServiceInfo;

public class VulnerabilityAnnotatorConfig extends AnnotatorConfig {

  private final VulnerabilityProviderType type;
  private final ServiceInfo provider;
  private final EndpointPaths paths;

  VulnerabilityAnnotatorConfig(
      ServiceInfo provider, VulnerabilityProviderType type, EndpointPaths paths) {
    super(AnnotationType.VULNERABILITY);
    this.provider = provider;
    this.type = type;
    this.paths = paths;
  }

  public ServiceInfo getProvider() {
    return this.provider;
  }

  public VulnerabilityProviderType getProviderType() {
    return this.type;
  }

  public String getQueryBatchPath() {
    return this.provider.uri() + this.paths.getBatchQuery();
  }

  public String getQueryPath() {
    return this.provider.uri() + this.paths.getQuery();
  }

  /**
   * Holder for the API's endpoint query paths
   */
  static class EndpointPaths {
    private final String queryBatch;
    private final String query;

    public EndpointPaths(String queryBatch, String query) {
      this.queryBatch = queryBatch;
      this.query = query;
    }

    String getBatchQuery() {
      return this.queryBatch;
    }

    String getQuery() {
      return this.query;
    }
  }
}
