/*******************************************************************************
* Copyright 2024 Dell Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
*******************************************************************************/
package com.alvarium.annotators.vulnerability;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;

import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class OsvApiHandler implements VulnerabilityApiHandler {
  private final Gson gson = new Gson();
  private final VulnerabilityAnnotatorConfig cfg;

  public OsvApiHandler(VulnerabilityAnnotatorConfig cfg) {
    this.cfg = cfg;
  }

  private OsvBatchResponse makeApiCall(Map<String, String> packages)
      throws VulnerabilityException {
    try {
      // Create the HTTP client and POST request
      CloseableHttpClient httpClient = HttpClients.createDefault();
      HttpPost httpPost = new HttpPost(this.cfg.getQueryBatchPath());

      // Set the request body
      OsvBatchRequest req = new OsvBatchRequest(packages);
      StringEntity entity = new StringEntity(gson.toJson(req), StandardCharsets.UTF_8);
      httpPost.setEntity(entity);

      // Set the content type header
      httpPost.setHeader("Content-Type", "application/json");

      // Execute the request
      CloseableHttpResponse response = httpClient.execute(httpPost);

      // Get the response body
      HttpEntity responseEntity = response.getEntity();
      String responseBody =
          responseEntity != null ? EntityUtils.toString(responseEntity) : null;

      OsvBatchResponse responseBatch = gson.fromJson(responseBody, OsvBatchResponse.class);

      // Close the response and the client
      response.close();
      httpClient.close();

      return responseBatch;
    } catch (IOException e) {
      throw new VulnerabilityException("Error making API call: " + e.getMessage(), e);
    }
  }

  public List<String> getVulnerabilityIds(Map<String, String> packages)
      throws VulnerabilityException {
    OsvBatchResponse response = makeApiCall(packages);
    final List<String> vulnerabilitiyIds = response.getVulnerabilityIds();

    return vulnerabilitiyIds;
  }
}
