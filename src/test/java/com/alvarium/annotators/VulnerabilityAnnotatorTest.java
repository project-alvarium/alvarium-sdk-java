/*******************************************************************************
* Copyright 2024 Dell Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
*******************************************************************************/
package com.alvarium.annotators;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;

import com.alvarium.SdkInfo;
import com.alvarium.contracts.Annotation;
import com.alvarium.contracts.AnnotationType;
import com.alvarium.contracts.LayerType;
import com.alvarium.hash.HashInfo;
import com.alvarium.hash.HashType;
import com.alvarium.serializers.AnnotatorConfigConverter;
import com.alvarium.sign.KeyInfo;
import com.alvarium.sign.SignType;
import com.alvarium.sign.SignatureInfo;
import com.alvarium.utils.ImmutablePropertyBag;
import com.alvarium.utils.PropertyBag;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.config.Configurator;
import org.junit.Rule;
import org.junit.rules.TemporaryFolder;

public class VulnerabilityAnnotatorTest {

  @Rule public TemporaryFolder dir = new TemporaryFolder();

  public void executeShouldReturnAnnotation() throws AnnotatorException, IOException {
    // init logger
    final Logger logger = LogManager.getRootLogger();
    Configurator.setRootLevel(Level.DEBUG);
    // construct annotator
    final AnnotatorFactory annotatorFactory = new AnnotatorFactory();
    final KeyInfo pubKey =
        new KeyInfo("./src/test/java/com/alvarium/annotators/public.key", SignType.Ed25519);
    final KeyInfo privKey =
        new KeyInfo(
            "./src/test/java/com/alvarium/annotators/private.key", SignType.Ed25519);
    final SignatureInfo sigInfo = new SignatureInfo(pubKey, privKey);

    final AnnotatorConfig annotatorInfo = this.getAnnotatorCfg();
    final AnnotatorConfig[] annotators = {annotatorInfo};
    final SdkInfo config =
        new SdkInfo(
            annotators,
            new HashInfo(HashType.SHA256Hash),
            sigInfo,
            null,
            LayerType.Application);

    final Annotator annotator = annotatorFactory.getAnnotator(annotatorInfo, config, logger);

    // Writing pom.xml file with a dependency that has a known vulnerability
    // Therefore a non satisfied annotation should be returned
    final File pomXmlFile = dir.newFile("pom.xml");
    try (FileWriter writer = new FileWriter(pomXmlFile)) {
      writer.write("<project>\n");
      writer.write("  <modelVersion>4.0.0</modelVersion>\n");
      writer.write("  <groupId>com.example</groupId>\n");
      writer.write("  <artifactId>my-project</artifactId>\n");
      writer.write("  <version>1.0.0</version>\n");
      writer.write("\n");
      writer.write("  <dependencies>\n");
      writer.write("    <dependency>\n");
      writer.write("      <groupId>junit</groupId>\n");
      writer.write("      <artifactId>junit</artifactId>\n");
      writer.write("      <version>4.12</version>\n");
      writer.write("      <scope>test</scope>\n");
      writer.write("    </dependency>\n");
      writer.write("  </dependencies>\n");
      writer.write("</project>\n");
    }

    // dummy data and empty prop bag
    final byte[] data = "test data".getBytes();
    HashMap<String, Object> map = new HashMap<String, Object>();
    map.put(AnnotationType.VULNERABILITY.name(), pomXmlFile.toPath().getParent().toString());
    final PropertyBag ctx = new ImmutablePropertyBag(map);

    final Annotation annotation = annotator.execute(ctx, data);

    assert !annotation.getIsSatisfied();
  }

  public void executeShouldReturnSatisfiedAnnotation() throws AnnotatorException, IOException {
    // init logger
    final Logger logger = LogManager.getRootLogger();
    Configurator.setRootLevel(Level.DEBUG);
    // construct annotator
    final AnnotatorFactory annotatorFactory = new AnnotatorFactory();
    final KeyInfo pubKey =
        new KeyInfo("./src/test/java/com/alvarium/annotators/public.key", SignType.Ed25519);
    final KeyInfo privKey =
        new KeyInfo(
            "./src/test/java/com/alvarium/annotators/private.key", SignType.Ed25519);
    final SignatureInfo sigInfo = new SignatureInfo(pubKey, privKey);
    final AnnotatorConfig annotatorInfo = this.getAnnotatorCfg();
    final AnnotatorConfig[] annotators = {annotatorInfo};
    final SdkInfo config =
        new SdkInfo(
            annotators,
            new HashInfo(HashType.SHA256Hash),
            sigInfo,
            null,
            LayerType.Application);

    final Annotator annotator = annotatorFactory.getAnnotator(annotatorInfo, config, logger);

    // Writing pom.xml file with a non existing dependency so there will be no exisitng
    // vurnerabilities
    // Therefore a satisifed annotation should be returned
    final File pomXmlFile = dir.newFile("pom.xml");
    try (FileWriter writer = new FileWriter(pomXmlFile)) {
      writer.write("<project>\n");
      writer.write("  <modelVersion>4.0.0</modelVersion>\n");
      writer.write("  <groupId>com.example</groupId>\n");
      writer.write("  <artifactId>my-project</artifactId>\n");
      writer.write("  <version>1.0.0</version>\n");
      writer.write("\n");
      writer.write("  <dependencies>\n");
      writer.write("    <dependency>\n");
      writer.write("      <groupId>testgroupId</groupId>\n");
      writer.write("      <artifactId>testartifactId</artifactId>\n");
      writer.write("      <version>9.99</version>\n");
      writer.write("      <scope>test</scope>\n");
      writer.write("    </dependency>\n");
      writer.write("  </dependencies>\n");
      writer.write("</project>\n");
    }

    // dummy data and empty prop bag
    final byte[] data = "test data".getBytes();
    HashMap<String, Object> map = new HashMap<String, Object>();
    map.put(AnnotationType.VULNERABILITY.name(), pomXmlFile.toPath().getParent().toString());
    final PropertyBag ctx = new ImmutablePropertyBag(map);

    final Annotation annotation = annotator.execute(ctx, data);

    assert annotation.getIsSatisfied();
  }

  public AnnotatorConfig getAnnotatorCfg() {
    final Gson gson =
        new GsonBuilder()
            .registerTypeAdapter(AnnotatorConfig.class, new AnnotatorConfigConverter())
            .create();

    final String json =
        "{\"kind\": \"vulnerability\", \"type\":"
          + " \"osv\",\"provider\":{\"host\":\"api.osv.dev\", \"protocol\": \"https\","
          + " \"port\": \"443\"},\"paths\": {\"queryBatch\": \"/v1/querybatch\","
          + " \"query\": \"/v1/query\"}  }";

    return gson.fromJson(json, AnnotatorConfig.class);
  }
}
