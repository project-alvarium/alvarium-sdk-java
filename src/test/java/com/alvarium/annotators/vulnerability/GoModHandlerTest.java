/*******************************************************************************
* Copyright 2024 Dell Inc.
*
* Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
* in compliance with the License. You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software distributed under the License
* is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
* or implied. See the License for the specific language governing permissions and limitations under
* the License.
*******************************************************************************/
package com.alvarium.annotators.vulnerability;

import java.io.File;
import java.nio.file.Files;
import java.util.Map;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;

public class GoModHandlerTest {
  @Rule public TemporaryFolder dir = new TemporaryFolder();

  @Test
  public void testGetPackagesWtihRequireBlock() throws Exception {
    File project = dir.newFolder("project");
    File gomodFile = new File(project.toPath() + "/go.mod");

    String artifactId1 = "pkg1/v1";
    String version1 = "v1.0";
    String artifactId2 = "pkg2/v2";
    String version2 = "v2.0";

    StringBuilder goModContent = new StringBuilder();
    goModContent.append("module github.com/edgexfoundry/edgex-go\n");
    goModContent.append("\n");
    goModContent.append("go 1.20\n");
    goModContent.append("\n");
    goModContent.append("require (\n");
    goModContent.append(artifactId1 + " " + version1 + "\n");
    goModContent.append(artifactId2 + " " + version2 + "\n");
    goModContent.append(")");

    Files.writeString(gomodFile.toPath(), goModContent.toString());

    GoModHandler handler = new GoModHandler(project.getAbsolutePath());

    assert handler.getFileName().equals(gomodFile.getName());

    Map<String, String> packages = handler.getPackages();

    assert packages.keySet().size() == 2;
    assert packages.get(artifactId1).equals(version1);
    assert packages.get(artifactId2).equals(version2);
  }

  @Test
  public void testGetPackagesWithoutRequireBlock() throws Exception {
    File project = dir.newFolder("project");
    File gomodFile = new File(project.toPath() + "/go.mod");

    String artifactId1 = "pkg1/v1";
    String version1 = "v1.0";
    String artifactId2 = "pkg2/v2";
    String version2 = "v2.0";

    StringBuilder goModContent = new StringBuilder();
    goModContent.append("module github.com/edgexfoundry/edgex-go\n");
    goModContent.append("\n");
    goModContent.append("go 1.20\n");
    goModContent.append("\n");
    goModContent.append("require " + artifactId1 + " " + version1 + "\n");
    goModContent.append("require " + artifactId2 + " " + version2 + "\n");

    Files.writeString(gomodFile.toPath(), goModContent.toString());

    GoModHandler handler = new GoModHandler(project.getAbsolutePath());

    assert handler.getFileName().equals(gomodFile.getName());

    Map<String, String> packages = handler.getPackages();

    assert packages.keySet().size() == 2;
    assert packages.get(artifactId1).equals(version1);
    assert packages.get(artifactId2).equals(version2);
  }

  @Test
  public void testGetPackagesWithMixedRequireLines() throws Exception {
    File project = dir.newFolder("project");
    File gomodFile = new File(project.toPath() + "/go.mod");

    String artifactId1 = "pkg1/v1";
    String version1 = "v1.0";
    String artifactId2 = "pkg2/v2";
    String version2 = "v2.0";
    String artifactId3 = "pkg3/v3";
    String version3 = "v3.0";
    String artifactId4 = "pkg4/v4";
    String version4 = "v4.0";

    StringBuilder goModContent = new StringBuilder();
    goModContent.append("module github.com/edgexfoundry/edgex-go\n");
    goModContent.append("\n");
    goModContent.append("go 1.20\n");
    goModContent.append("\n");

    goModContent.append("require " + artifactId1 + " " + version1 + "\n");
    goModContent.append("exclude example.com/old/thing v1.2.3\n");
    goModContent.append("require (\n");
    goModContent.append(artifactId2 + " " + version2 + "\n");
    goModContent.append(artifactId3 + " " + version3 + "\n");
    goModContent.append(")\n");
    goModContent.append("require " + artifactId4 + " " + version4 + "\n");
    goModContent.append("retract [v1.9.0, v1.9.5]\n");

    Files.writeString(gomodFile.toPath(), goModContent.toString());

    GoModHandler handler = new GoModHandler(project.getAbsolutePath());

    assert handler.getFileName().equals(gomodFile.getName());

    Map<String, String> packages = handler.getPackages();

    assert packages.keySet().size() == 4;
    assert packages.get(artifactId1).equals(version1);
    assert packages.get(artifactId2).equals(version2);
    assert packages.get(artifactId3).equals(version3);
    assert packages.get(artifactId4).equals(version4);
  }

  @Test
  public void testGetPackagesWithoutReplaceBlock() throws Exception {
    File project = dir.newFolder("project");
    File gomodFile = new File(project.toPath() + "/go.mod");

    String artifactId1 = "pkg1/v1";
    String version1 = "v1.0";
    String artifactId2 = "pkg2/v2";
    String version2 = "v2.0";
    String artifactId3 = "pkg3/v3";
    String version3 = "v3.0";
    String artifactId4 = "pkg4/v4";
    String version4 = "v4.0";
    String artifactId5 = "pkg5/v5";
    String version5 = "v5.0";

    StringBuilder goModContent = new StringBuilder();
    goModContent.append("module github.com/edgexfoundry/edgex-go\n");
    goModContent.append("\n");
    goModContent.append("go 1.20\n");
    goModContent.append("\n");

    goModContent.append("require " + artifactId1 + " " + version1 + "\n");
    goModContent.append("exclude example.com/old/thing v1.2.3\n");
    goModContent.append("require (\n");
    goModContent.append(artifactId2 + " " + version2 + "\n");
    goModContent.append(artifactId3 + " " + version3 + "\n");
    goModContent.append(")\n");
    goModContent.append(
        "replace "
            + artifactId3
            + " "
            + version3
            + " => "
            + artifactId5
            + " "
            + version5
            + "\n");
    goModContent.append("require " + artifactId4 + " " + version4 + "\n");
    goModContent.append("retract [v1.9.0, v1.9.5]\n");

    Files.writeString(gomodFile.toPath(), goModContent.toString());

    GoModHandler handler = new GoModHandler(project.getAbsolutePath());

    assert handler.getFileName().equals(gomodFile.getName());

    Map<String, String> packages = handler.getPackages();

    assert packages.keySet().size() == 4;
    assert packages.get(artifactId1).equals(version1);
    assert packages.get(artifactId2).equals(version2);
    assert packages.get(artifactId4).equals(version4);
    assert packages.get(artifactId5).equals(version5);
  }

  @Test
  public void testGetPackagesWithReplaceBlock() throws Exception {
    File project = dir.newFolder("project");
    File gomodFile = new File(project.toPath() + "/go.mod");

    String artifactId1 = "pkg1/v1";
    String version1 = "v1.0";
    String artifactId2 = "pkg2/v2";
    String version2 = "v2.0";
    String artifactId3 = "pkg3/v3";
    String version3 = "v3.0";
    String artifactId4 = "pkg4/v4";
    String version4 = "v4.0";
    String artifactId5 = "pkg5/v5";
    String version5 = "v5.0";

    StringBuilder goModContent = new StringBuilder();
    goModContent.append("module github.com/edgexfoundry/edgex-go\n");
    goModContent.append("\n");
    goModContent.append("go 1.20\n");
    goModContent.append("\n");

    goModContent.append("require " + artifactId1 + " " + version1 + "\n");
    goModContent.append("exclude example.com/old/thing v1.2.3\n");
    goModContent.append("require (\n");
    goModContent.append(artifactId2 + " " + version2 + "\n");
    goModContent.append(artifactId3 + " " + version3 + "\n");
    goModContent.append(")\n");
    goModContent.append("replace (\n");
    goModContent.append(
        artifactId2 + " " + version2 + " => " + artifactId4 + " " + version4 + "\n");
    goModContent.append(
        artifactId3 + " " + version3 + " => " + artifactId5 + " " + version5 + "\n");
    goModContent.append(")\n");
    goModContent.append("retract [v1.9.0, v1.9.5]\n");

    Files.writeString(gomodFile.toPath(), goModContent.toString());

    GoModHandler handler = new GoModHandler(project.getAbsolutePath());

    assert handler.getFileName().equals(gomodFile.getName());

    Map<String, String> packages = handler.getPackages();

    assert packages.keySet().size() == 3;
    assert packages.get(artifactId1).equals(version1);
    assert packages.get(artifactId4).equals(version4);
    assert packages.get(artifactId5).equals(version5);
  }
}
